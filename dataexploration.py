# -*- coding: utf-8 -*-
"""dataExploration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tM_puFhXvziLHAs0W2vINWN-udTAQpzD
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import shutil
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import cv2 as cv
from numpy.random import seed
seed(45)
import pickle
import pandas as pd
import re,json

from sklearn.utils import shuffle
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from skimage import io
from glob import glob 
import datetime
# %matplotlib inline
# %load_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
# %cd /Users/barakasoka/Desktop

CUSTOM_MODEL_NAME = 'FinalModel_1'

paths = {
    'WORKSPACE_PATH': os.path.join('SAVE', 'workspace'),
    'SCRIPTS_PATH': os.path.join('SAVE','scripts'),
    'METADATA_PATH': os.path.join('SAVE','metadata'),
    'DATASET_PATH': os.path.join('SAVE','Datasets'),
    'NONCERVIX_PATH': os.path.join('SAVE','non_cervix'),
    'IMAGE_PATH': os.path.join('SAVE', 'workspace','images'),
    'TRAIN_PATH': os.path.join('SAVE', 'workspace','images','train'),
    'VALID_PATH': os.path.join('SAVE','workspace','images','valid' ),
    'TRAINPOS_PATH': os.path.join('SAVE','workspace','images','train','positive'),
    'TRAINNEG_PATH': os.path.join('SAVE','workspace','images','train','negative'),
    'VALIDPOS_PATH': os.path.join('SAVE','workspace','images','valid','positive'),
    'VALIDNEG_PATH': os.path.join('SAVE','workspace','images','valid','negative'),
    'SORTED_PATH': os.path.join('SAVE', 'workspace','images','sorted'),
    'MODEL_PATH': os.path.join('SAVE', 'workspace','models'),
    'OUTPUT_PATH': os.path.join('SAVE', 'workspace','models',CUSTOM_MODEL_NAME), 
 }

for path in paths.values():
    if not os.path.exists(path):
        if os.name == 'posix':
            !mkdir -p {path}
        if os.name == 'nt':
            !mkdir {path}

"""#### meta data exploration"""

#RUN A SCRIPT TO IMPORT A META TO THE META PATH

meta_data= pd.read_csv(os.path.join(paths['METADATA_PATH'],"meta_data.csv"))
meta_data

meta_data.info()

#MANUAL CLEANING OF THE CERVIX IMAGES FROM NON-CERVIX

print(len(os.listdir(paths['DATASET_PATH'])))
print(len(os.listdir(paths['NONCERVIX_PATH'])))

#RUN A SORT SCRIPT FROM DATASET TO SORTED PATH

print(os.listdir(paths['SORTED_PATH']))

"""#### exploring the image data"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /Users/barakasoka/Desktop/SAVE/workspace/images/sorted
# %cd positive_train/
# post_dir=os.path.join(paths['SORTED_PATH'],'positive_train')
post_dir='/Users/barakasoka/Desktop/SAVE/workspace/images/sorted/positive_train'
ls= os.listdir(post_dir)
print(len(ls))
# ls2= []
# for i in ls:
#     im= cv.imread(i)
#     im2=cv.cvtColor(im, cv.COLOR_BGR2RGB)
#     ls2.append(im2)
#     if len(ls2) == 4:
#         break
    
im= cv.imread(ls[10])
im2=cv.cvtColor(im, cv.COLOR_BGR2RGB)
print(type(im)) 
print(im.shape)
print(im.min())
print(im.max())
small_im = cv.resize(im,(256,256))
print(small_im.shape)
plt.imshow(im2)

"""#### manual labeling and cropped by the oncologist to the train and valid path"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /Users/barakasoka/Desktop/SAVE/workspace/images/train/positive
positivedir= "/Users/barakasoka/Desktop/SAVE/workspace/images/train/positive"
positive_images = []
poslist= os.listdir(positivedir)
for sample in poslist:
    img = cv.imread(sample)
    small_im = cv.resize(img,(256,256))
    RGB_img = cv.cvtColor(small_im, cv.COLOR_BGR2RGB)
    positive_images.append(RGB_img)
    if len(positive_images)==6:
        break
# %cd /Users/barakasoka/Desktop/SAVE/workspace/images/train/negative
negativedir= "/Users/barakasoka/Desktop/SAVE/workspace/images/train/negative"
negative_images= []
neglist= os.listdir(negativedir)        
for i in neglist:
    img = cv.imread(i)
    small_im = cv.resize(img,(256,256))
    negative_images.append(small_im)
    if len(negative_images)==6:
        break
fig,axis = plt.subplots(2,6,figsize=(20,8))
fig.suptitle('Dataset samples presentation plot',fontsize=20)
for i,img in enumerate(positive_images):
#     RGB_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
    axis[0,i].imshow(img)
    rect = patches.Rectangle((50,50),150,150,linewidth=4,edgecolor='g',facecolor='none', linestyle=':', capstyle='round')
axis[0,0].set_ylabel('Positive samples', size='large')
for i,img in enumerate(negative_images):
    RGB_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
    axis[1,i].imshow(RGB_img)
    rect = patches.Rectangle((50,50),150,150,linewidth=4,edgecolor='r',facecolor='none', linestyle=':', capstyle='round')
axis[1,0].set_ylabel('Negative samples', size='large')

"""#### cropped image"""

from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
datagen= ImageDataGenerator()

plt_im=positive_images[2]
batch_im= plt_im.reshape((1,)+ plt_im.shape)
pad_im= tf.image.resize_with_crop_or_pad(batch_im, 150,  150)

print(pad_im.shape)
# plt.imshow(pad_im)
i=0
for batch in datagen.flow(pad_im, batch_size=1):
    plt.figure(i)
    imgplot = plt.imshow(image.array_to_img(batch[0])) 
    i += 1
#     if i % 2 == 0:
    break 
plt.show()

"""#### visualize the distribution of pixels"""

# Commented out IPython magic to ensure Python compatibility.
## channels pixels for positive samples
# %cd /Users/barakasoka/Desktop/SAVE/workspace/images/train/positive
positivedir= "/Users/barakasoka/Desktop/SAVE/workspace/images/train/positive"
positive_images = []
poslist= os.listdir(positivedir)
for sample in poslist:
    img = cv.imread(sample)
    if img is None:
        print('Wrong path:')
    else:
        small_im = cv.resize(img,(256,256))
        RGB_img = cv.cvtColor(small_im, cv.COLOR_BGR2RGB)
        positive_images.append(RGB_img)
pos_r_pixels_mean = []
pos_g_pixels_mean = []
pos_b_pixels_mean = []
for i in positive_images:
    img=np.array(i)
    r_pixels = round(img[:, :, 0].flatten().mean(),2)
    g_pixels = round(img[:, :, 1].flatten().mean(),2)
    b_pixels = round(img[:, :, 2].flatten().mean(),2)
    pos_r_pixels_mean.append(r_pixels)
    pos_g_pixels_mean.append(g_pixels)
    pos_b_pixels_mean.append(b_pixels)
print(len(positive_images))

## channels pixels for negative samples
# %cd /Users/barakasoka/Desktop/SAVE/workspace/images/train/negative
negativedir= "/Users/barakasoka/Desktop/SAVE/workspace/images/train/negative"
negative_images= []
neglist= os.listdir(negativedir)
for i in neglist:
    img = cv.imread(i)
    if img is None:
        print('Wrong path:')
    else:
        small_im = cv.resize(img,(256,256))
        RGB_img = cv.cvtColor(small_im, cv.COLOR_BGR2RGB)
        negative_images.append(RGB_img)
neg_r_pixels_mean = []
neg_g_pixels_mean = []
neg_b_pixels_mean = []
for i in negative_images:
    img=np.array(i)
    r_pixels = round(img[:, :, 0].flatten().mean(),2)  
    g_pixels = round(img[:, :, 1].flatten().mean(),2)
    b_pixels = round(img[:, :, 2].flatten().mean(),2)
    neg_r_pixels_mean.append(r_pixels)
    neg_g_pixels_mean.append(g_pixels)
    neg_b_pixels_mean.append(b_pixels)    
print(len(negative_images))
print(len(neg_r_pixels_mean))
print(len(pos_r_pixels_mean))

nr_of_bins = 256 #each possible pixel value will get a bin in the following histograms
fig,axs = plt.subplots(3,2,sharey=True,figsize=(8,8),dpi=150)
fig.suptitle('Histogram of average channel pixels', fontsize= 24)
#RGB channels
axs[0,0].hist(pos_r_pixels_mean,bins=nr_of_bins,density=True)
axs[0,1].hist(neg_r_pixels_mean,bins=nr_of_bins,density=True)
axs[1,0].hist(pos_g_pixels_mean,bins=nr_of_bins,density=True)
axs[1,1].hist(neg_g_pixels_mean,bins=nr_of_bins,density=True)
axs[2,0].hist(pos_b_pixels_mean,bins=nr_of_bins,density=True)
axs[2,1].hist(neg_b_pixels_mean,bins=nr_of_bins,density=True)
#Set image labels
axs[0,0].set_title("Positive samples (N =" + str(len(positive_images)) + ")");
axs[0,1].set_title("Negative samples (N =" + str(len(negative_images)) + ")");
axs[0,1].set_ylabel("Red",rotation='horizontal',labelpad=35,fontsize=12)
axs[1,1].set_ylabel("Green",rotation='horizontal',labelpad=35,fontsize=12)
axs[2,1].set_ylabel("Blue",rotation='horizontal',labelpad=35,fontsize=12)
for i in range(3):
    axs[i,0].set_ylabel("Relative frequency")